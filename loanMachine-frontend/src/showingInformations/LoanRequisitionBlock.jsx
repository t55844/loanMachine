import { useState } from "react";
// 1. Destructure 'loading' and 'error' from useWeb3
import { useWeb3 } from "../Web3Context"; 
import LoanRequisitionForm from "../loan-interaction/LoanRequisitionForm";
import LoanRequisitionMonitor from "./LoanRequisitionMonitor";
import PendingRequisitionsList from "./PendingRequisitionsList";
import UserLoanContracts from "./UserLoanContracts";

function LoanRequisitionBlock() {
Â  const [activeTab, setActiveTab] = useState("create");
Â  const [refreshTrigger, setRefreshTrigger] = useState(0);
Â  // ðŸ‘‡ UPDATE: Include loading and error from the hook
Â  const { account, contract, member, loading, error } = useWeb3();

Â  const handleRequisitionCreated = () => {
Â  Â  setRefreshTrigger(prev => prev + 1);
Â  };

Â  const handleCoverLoan = () => {
Â  Â  setRefreshTrigger(prev => prev + 1);
Â  };

Â  const handleLoanUpdate = () => {
Â  Â  setRefreshTrigger(prev => prev + 1);
Â  };

Â  // ðŸ›‘ CORE FIX: Render loading/error states before component logic
Â  if (loading) {
Â  Â  return <div className="requsitionBlock"><p>Connecting to Web3 and loading member data...</p></div>;
Â  }

Â  if (error) {
Â  Â  return <div className="requsitionBlock"><p style={{color: 'var(--accent-red)'}}>Connection Error: {error}</p></div>;
Â  }
Â  
Â  // Optional but highly recommended: Handle the case where the wallet is connected 
Â  // but the member profile does not exist (member is not null, but id is null)
Â  if (!member || !member.walletAddress) {
      // This state should only be reachable if 'account' is also null, 
      // or if there's a serious data fetch error not captured by 'loading/error'.
      return <div className="requsitionBlock"><p>Please connect your wallet.</p></div>;
Â  }


Â  return (
Â  Â  <div className="requsitionBlock">
Â  Â  Â  <h1>Loan Requisition System</h1>
Â  Â  Â  
Â  Â  Â  {/* ... Buttons and Tab Navigation (no changes needed here) ... */}
Â  Â  Â  <div style={{ display: 'flex', gap: '16px', marginBottom: '24px', flexWrap: 'wrap' }}>
Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  onClick={() => setActiveTab("create")}
Â  Â  Â  Â  Â  style={{ 
Â  Â  Â  Â  Â  Â  padding: '12px 20px',
Â  Â  Â  Â  Â  Â  border: 'none',
Â  Â  Â  Â  Â  Â  borderRadius: '6px',
Â  Â  Â  Â  Â  Â  cursor: 'pointer',
Â  Â  Â  Â  Â  Â  fontWeight: '600',
Â  Â  Â  Â  Â  Â  fontSize: '14px',
Â  Â  Â  Â  Â  Â  backgroundColor: activeTab === "create" ? "var(--accent-blue)" : "var(--bg-tertiary)",
Â  Â  Â  Â  Â  Â  color: activeTab === "create" ? "white" : "var(--text-primary)"
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Create Requisition
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  onClick={() => setActiveTab("monitor")}
Â  Â  Â  Â  Â  style={{ 
Â  Â  Â  Â  Â  Â  padding: '12px 20px',
Â  Â  Â  Â  Â  Â  border: 'none',
Â  Â  Â  Â  Â  Â  borderRadius: '6px',
Â  Â  Â  Â  Â  Â  cursor: 'pointer',
Â  Â  Â  Â  Â  Â  fontWeight: '600',
Â  Â  Â  Â  Â  Â  fontSize: '14px',
Â  Â  Â  Â  Â  Â  backgroundColor: activeTab === "monitor" ? "var(--accent-blue)" : "var(--bg-tertiary)",
Â  Â  Â  Â  Â  Â  color: activeTab === "monitor" ? "white" : "var(--text-primary)"
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  My Requisitions
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  onClick={() => setActiveTab("pending")}
Â  Â  Â  Â  Â  style={{ 
Â  Â  Â  Â  Â  Â  padding: '12px 20px',
Â  Â  Â  Â  Â  Â  border: 'none',
Â  Â  Â  Â  Â  Â  borderRadius: '6px',
Â  Â  Â  Â  Â  Â  cursor: 'pointer',
Â  Â  Â  Â  Â  Â  fontWeight: '600',
Â  Â  Â  Â  Â  Â  fontSize: '14px',
Â  Â  Â  Â  Â  Â  backgroundColor: activeTab === "pending" ? "var(--accent-blue)" : "var(--bg-tertiary)",
Â  Â  Â  Â  Â  Â  color: activeTab === "pending" ? "white" : "var(--text-primary)"
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Cover Loans
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  onClick={() => setActiveTab("contracts")}
Â  Â  Â  Â  Â  style={{ 
Â  Â  Â  Â  Â  Â  padding: '12px 20px',
Â  Â  Â  Â  Â  Â  border: 'none',
Â  Â  Â  Â  Â  Â  borderRadius: '6px',
Â  Â  Â  Â  Â  Â  cursor: 'pointer',
Â  Â  Â  Â  Â  Â  fontWeight: '600',
Â  Â  Â  Â  Â  Â  fontSize: '14px',
Â  Â  Â  Â  Â  Â  backgroundColor: activeTab === "contracts" ? "var(--accent-blue)" : "var(--bg-tertiary)",
Â  Â  Â  Â  Â  Â  color: activeTab === "contracts" ? "white" : "var(--text-primary)"
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  My Contracts
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  Â  
Â  Â  Â  {activeTab === "create" && (
Â  Â  Â  Â  <LoanRequisitionForm 
Â  Â  Â  Â  Â  contract={contract}
Â  Â  Â  Â  Â  account={account}
Â  Â  Â  Â  Â  onRequisitionCreated={handleRequisitionCreated}
Â  Â  Â  Â  Â  member={member}
Â  Â  Â  Â  />
Â  Â  Â  )}
Â  Â  Â  
Â  Â  Â  {activeTab === "monitor" && (
Â  Â  Â  Â  <LoanRequisitionMonitor 
Â  Â  Â  Â  Â  contract={contract}
Â  Â  Â  Â  Â  account={account}
Â  Â  Â  Â  Â  // If LoanRequisitionMonitor needs member ID, access it safely
Â  Â  Â  Â  Â  memberId={member?.memberId || member?.id} 
Â  Â  Â  Â  Â  key={refreshTrigger}
Â  Â  Â  Â  />
Â  Â  Â  )}
Â  Â  Â  
Â  Â  Â  {activeTab === "pending" && (
Â  Â  Â  Â  <PendingRequisitionsList 
Â  Â  Â  Â  Â  contract={contract}
Â  Â  Â  Â  Â  account={account}
Â  Â  Â  Â  Â  key={refreshTrigger}
Â  Â  Â  Â  Â  onCoverLoan={handleCoverLoan}
Â  Â  Â  Â  Â  member={member}
Â  Â  Â  Â  />
Â  Â  Â  )}

Â  Â  Â  {activeTab === "contracts" && (
Â  Â  Â  Â  <UserLoanContracts 
Â  Â  Â  Â  Â  contract={contract}
Â  Â  Â  Â  Â  account={account}
Â  Â  Â  Â  Â  key={refreshTrigger}
Â  Â  Â  Â  Â  onLoanUpdate={handleLoanUpdate}
Â  Â  Â  Â  />
Â  Â  Â  )}
Â  Â  </div>
Â  );
}

export default LoanRequisitionBlock;