type Donation @entity(immutable: false) {
  id: ID!
  donor: User! # Changed from Bytes to User
  amount: BigInt!
  timestamp: BigInt!
  totalDonation: BigInt!
}

type Borrow @entity(immutable: false) {
  id: ID!
  borrower: User! # Changed from Bytes to User
  amount: BigInt!
  timestamp: BigInt!
  totalBorrowing: BigInt!
}

type Repayment @entity(immutable: false) {
  id: ID!
  borrower: User! # Changed from Bytes to User
  amount: BigInt!
  timestamp: BigInt!
  remainingDebt: BigInt!
}

type User @entity(immutable: false) {
  id: ID!
  totalDonated: BigInt!
  totalBorrowed: BigInt!
  currentDebt: BigInt!
  lastActivity: BigInt!
  donations: [Donation!]! @derivedFrom(field: "donor")
  borrows: [Borrow!]! @derivedFrom(field: "borrower")
  repayments: [Repayment!]! @derivedFrom(field: "borrower")
}

type Stats @entity(immutable: false) {
  id: ID!
  totalDonations: BigInt!
  totalBorrowed: BigInt!
  availableBalance: BigInt!
}




# loan request entity (one per requisition)
type LoanRequest @entity(immutable: false) {
id: ID!
requisitionId: BigInt!
borrower: User!
amount: BigInt!
timestamp: BigInt!
# sum of coverage amounts (wei)
currentCoverageAmount: BigInt!
# number of distinct lenders who covered this requisition
coveringLendersCount: Int!
# whether the loan was funded (minimum coverage reached and _fundLoan called)
funded: Boolean!
fundedAt: BigInt
# derived list of coverage entries
coverages: [LoanCoverage!]! @derivedFrom(field: "loanRequest")
}


# per-lender coverage record (accumulates if same lender covers multiple times)
type LoanCoverage @entity(immutable: false) {
id: ID!
loanRequest: LoanRequest!
lender: User!
amount: BigInt!
timestamp: BigInt!
}