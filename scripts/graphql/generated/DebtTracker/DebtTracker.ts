// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BorrowerStatusUpdated extends ethereum.Event {
  get params(): BorrowerStatusUpdated__Params {
    return new BorrowerStatusUpdated__Params(this);
  }
}

export class BorrowerStatusUpdated__Params {
  _event: BorrowerStatusUpdated;

  constructor(event: BorrowerStatusUpdated) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newStatus(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class DebtorAdded extends ethereum.Event {
  get params(): DebtorAdded__Params {
    return new DebtorAdded__Params(this);
  }
}

export class DebtorAdded__Params {
  _event: DebtorAdded;

  constructor(event: DebtorAdded) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DebtorRemoved extends ethereum.Event {
  get params(): DebtorRemoved__Params {
    return new DebtorRemoved__Params(this);
  }
}

export class DebtorRemoved__Params {
  _event: DebtorRemoved;

  constructor(event: DebtorRemoved) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MonthlyUpdateTriggered extends ethereum.Event {
  get params(): MonthlyUpdateTriggered__Params {
    return new MonthlyUpdateTriggered__Params(this);
  }
}

export class MonthlyUpdateTriggered__Params {
  _event: MonthlyUpdateTriggered;

  constructor(event: MonthlyUpdateTriggered) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DebtTracker extends ethereum.SmartContract {
  static bind(address: Address): DebtTracker {
    return new DebtTracker("DebtTracker", address);
  }

  MONTHLY_INTERVAL(): BigInt {
    let result = super.call(
      "MONTHLY_INTERVAL",
      "MONTHLY_INTERVAL():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MONTHLY_INTERVAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MONTHLY_INTERVAL",
      "MONTHLY_INTERVAL():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}
