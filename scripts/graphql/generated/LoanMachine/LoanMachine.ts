// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BorrowLimitReached extends ethereum.Event {
  get params(): BorrowLimitReached__Params {
    return new BorrowLimitReached__Params(this);
  }
}

export class BorrowLimitReached__Params {
  _event: BorrowLimitReached;

  constructor(event: BorrowLimitReached) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Borrowed extends ethereum.Event {
  get params(): Borrowed__Params {
    return new Borrowed__Params(this);
  }
}

export class Borrowed__Params {
  _event: Borrowed;

  constructor(event: Borrowed) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalBorrowing(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Donated extends ethereum.Event {
  get params(): Donated__Params {
    return new Donated__Params(this);
  }
}

export class Donated__Params {
  _event: Donated;

  constructor(event: Donated) {
    this._event = event;
  }

  get donor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalDonation(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewBorrower extends ethereum.Event {
  get params(): NewBorrower__Params {
    return new NewBorrower__Params(this);
  }
}

export class NewBorrower__Params {
  _event: NewBorrower;

  constructor(event: NewBorrower) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewDonor extends ethereum.Event {
  get params(): NewDonor__Params {
    return new NewDonor__Params(this);
  }
}

export class NewDonor__Params {
  _event: NewDonor;

  constructor(event: NewDonor) {
    this._event = event;
  }

  get donor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Repaid extends ethereum.Event {
  get params(): Repaid__Params {
    return new Repaid__Params(this);
  }
}

export class Repaid__Params {
  _event: Repaid;

  constructor(event: Repaid) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get remainingDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanMachine__getUserStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getUserDonations(): BigInt {
    return this.value0;
  }

  getUserBorrowings(): BigInt {
    return this.value1;
  }

  getLastBorrow(): BigInt {
    return this.value2;
  }

  getCanBorrowNow(): boolean {
    return this.value3;
  }
}

export class LoanMachine extends ethereum.SmartContract {
  static bind(address: Address): LoanMachine {
    return new LoanMachine("LoanMachine", address);
  }

  canUserBorrow(_user: Address, _amount: BigInt): boolean {
    let result = super.call(
      "canUserBorrow",
      "canUserBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_canUserBorrow(
    _user: Address,
    _amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canUserBorrow",
      "canUserBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAvailableBalance(): BigInt {
    let result = super.call(
      "getAvailableBalance",
      "getAvailableBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getAvailableBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableBalance",
      "getAvailableBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableBorrowAmount(_user: Address): BigInt {
    let result = super.call(
      "getAvailableBorrowAmount",
      "getAvailableBorrowAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try_getAvailableBorrowAmount(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableBorrowAmount",
      "getAvailableBorrowAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowing(_user: Address): BigInt {
    let result = super.call("getBorrowing", "getBorrowing(address):(uint256)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBigInt();
  }

  try_getBorrowing(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowing",
      "getBorrowing(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDonation(_user: Address): BigInt {
    let result = super.call("getDonation", "getDonation(address):(uint256)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBigInt();
  }

  try_getDonation(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDonation",
      "getDonation(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastBorrowTime(_user: Address): BigInt {
    let result = super.call(
      "getLastBorrowTime",
      "getLastBorrowTime(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try_getLastBorrowTime(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastBorrowTime",
      "getLastBorrowTime(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalBorrowed(): BigInt {
    let result = super.call(
      "getTotalBorrowed",
      "getTotalBorrowed():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalBorrowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBorrowed",
      "getTotalBorrowed():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDonations(): BigInt {
    let result = super.call(
      "getTotalDonations",
      "getTotalDonations():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalDonations(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDonations",
      "getTotalDonations():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserStats(_user: Address): LoanMachine__getUserStatsResult {
    let result = super.call(
      "getUserStats",
      "getUserStats(address):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(_user)],
    );

    return new LoanMachine__getUserStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
    );
  }

  try_getUserStats(
    _user: Address,
  ): ethereum.CallResult<LoanMachine__getUserStatsResult> {
    let result = super.tryCall(
      "getUserStats",
      "getUserStats(address):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoanMachine__getUserStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
      ),
    );
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this);
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this);
  }
}

export class DonateCall__Inputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class DonateCall__Outputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}
