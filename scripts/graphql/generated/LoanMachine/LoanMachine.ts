// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AvailableBalanceUpdated extends ethereum.Event {
  get params(): AvailableBalanceUpdated__Params {
    return new AvailableBalanceUpdated__Params(this);
  }
}

export class AvailableBalanceUpdated__Params {
  _event: AvailableBalanceUpdated;

  constructor(event: AvailableBalanceUpdated) {
    this._event = event;
  }

  get total(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BorrowLimitReached extends ethereum.Event {
  get params(): BorrowLimitReached__Params {
    return new BorrowLimitReached__Params(this);
  }
}

export class BorrowLimitReached__Params {
  _event: BorrowLimitReached;

  constructor(event: BorrowLimitReached) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Borrowed extends ethereum.Event {
  get params(): Borrowed__Params {
    return new Borrowed__Params(this);
  }
}

export class Borrowed__Params {
  _event: Borrowed;

  constructor(event: Borrowed) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalBorrowing(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BorrowerStatusUpdated extends ethereum.Event {
  get params(): BorrowerStatusUpdated__Params {
    return new BorrowerStatusUpdated__Params(this);
  }
}

export class BorrowerStatusUpdated__Params {
  _event: BorrowerStatusUpdated;

  constructor(event: BorrowerStatusUpdated) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newStatus(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class DebtorAdded extends ethereum.Event {
  get params(): DebtorAdded__Params {
    return new DebtorAdded__Params(this);
  }
}

export class DebtorAdded__Params {
  _event: DebtorAdded;

  constructor(event: DebtorAdded) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DebtorRemoved extends ethereum.Event {
  get params(): DebtorRemoved__Params {
    return new DebtorRemoved__Params(this);
  }
}

export class DebtorRemoved__Params {
  _event: DebtorRemoved;

  constructor(event: DebtorRemoved) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Donated extends ethereum.Event {
  get params(): Donated__Params {
    return new Donated__Params(this);
  }
}

export class Donated__Params {
  _event: Donated;

  constructor(event: Donated) {
    this._event = event;
  }

  get donor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalDonation(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LenderRepaid extends ethereum.Event {
  get params(): LenderRepaid__Params {
    return new LenderRepaid__Params(this);
  }
}

export class LenderRepaid__Params {
  _event: LenderRepaid;

  constructor(event: LenderRepaid) {
    this._event = event;
  }

  get requisitionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanCompleted extends ethereum.Event {
  get params(): LoanCompleted__Params {
    return new LoanCompleted__Params(this);
  }
}

export class LoanCompleted__Params {
  _event: LoanCompleted;

  constructor(event: LoanCompleted) {
    this._event = event;
  }

  get requisitionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LoanContractGenerated extends ethereum.Event {
  get params(): LoanContractGenerated__Params {
    return new LoanContractGenerated__Params(this);
  }
}

export class LoanContractGenerated__Params {
  _event: LoanContractGenerated;

  constructor(event: LoanContractGenerated) {
    this._event = event;
  }

  get walletAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requisitionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get parcelsPending(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get parcelsValues(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get paymentDates(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }

  get creationTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class LoanCovered extends ethereum.Event {
  get params(): LoanCovered__Params {
    return new LoanCovered__Params(this);
  }
}

export class LoanCovered__Params {
  _event: LoanCovered;

  constructor(event: LoanCovered) {
    this._event = event;
  }

  get requisitionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get coverageAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanFunded extends ethereum.Event {
  get params(): LoanFunded__Params {
    return new LoanFunded__Params(this);
  }
}

export class LoanFunded__Params {
  _event: LoanFunded;

  constructor(event: LoanFunded) {
    this._event = event;
  }

  get requisitionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LoanRequisitionCreated extends ethereum.Event {
  get params(): LoanRequisitionCreated__Params {
    return new LoanRequisitionCreated__Params(this);
  }
}

export class LoanRequisitionCreated__Params {
  _event: LoanRequisitionCreated;

  constructor(event: LoanRequisitionCreated) {
    this._event = event;
  }

  get requisitionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get parcelsCount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MonthlyUpdateTriggered extends ethereum.Event {
  get params(): MonthlyUpdateTriggered__Params {
    return new MonthlyUpdateTriggered__Params(this);
  }
}

export class MonthlyUpdateTriggered__Params {
  _event: MonthlyUpdateTriggered;

  constructor(event: MonthlyUpdateTriggered) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewBorrower extends ethereum.Event {
  get params(): NewBorrower__Params {
    return new NewBorrower__Params(this);
  }
}

export class NewBorrower__Params {
  _event: NewBorrower;

  constructor(event: NewBorrower) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewDonor extends ethereum.Event {
  get params(): NewDonor__Params {
    return new NewDonor__Params(this);
  }
}

export class NewDonor__Params {
  _event: NewDonor;

  constructor(event: NewDonor) {
    this._event = event;
  }

  get donor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ParcelPaid extends ethereum.Event {
  get params(): ParcelPaid__Params {
    return new ParcelPaid__Params(this);
  }
}

export class ParcelPaid__Params {
  _event: ParcelPaid;

  constructor(event: ParcelPaid) {
    this._event = event;
  }

  get requisitionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get parcelsRemaining(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Repaid extends ethereum.Event {
  get params(): Repaid__Params {
    return new Repaid__Params(this);
  }
}

export class Repaid__Params {
  _event: Repaid;

  constructor(event: Repaid) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get remainingDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TotalBorrowedUpdated extends ethereum.Event {
  get params(): TotalBorrowedUpdated__Params {
    return new TotalBorrowedUpdated__Params(this);
  }
}

export class TotalBorrowedUpdated__Params {
  _event: TotalBorrowedUpdated;

  constructor(event: TotalBorrowedUpdated) {
    this._event = event;
  }

  get total(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TotalDonationsUpdated extends ethereum.Event {
  get params(): TotalDonationsUpdated__Params {
    return new TotalDonationsUpdated__Params(this);
  }
}

export class TotalDonationsUpdated__Params {
  _event: TotalDonationsUpdated;

  constructor(event: TotalDonationsUpdated) {
    this._event = event;
  }

  get total(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get donor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get donations(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanMachine__getActiveLoansResultActiveLoansStruct extends ethereum.Tuple {
  get walletAddress(): Address {
    return this[0].toAddress();
  }

  get requisitionId(): BigInt {
    return this[1].toBigInt();
  }

  get status(): i32 {
    return this[2].toI32();
  }

  get parcelsCount(): BigInt {
    return this[3].toBigInt();
  }

  get parcelsPending(): BigInt {
    return this[4].toBigInt();
  }

  get parcelsValues(): BigInt {
    return this[5].toBigInt();
  }

  get paymentDates(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get parcelsAmounts(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get creationTime(): BigInt {
    return this[8].toBigInt();
  }
}

export class LoanMachine__getActiveLoansResult {
  value0: Array<LoanMachine__getActiveLoansResultActiveLoansStruct>;
  value1: Array<BigInt>;

  constructor(
    value0: Array<LoanMachine__getActiveLoansResultActiveLoansStruct>,
    value1: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getActiveLoans(): Array<LoanMachine__getActiveLoansResultActiveLoansStruct> {
    return this.value0;
  }

  getRequisitionIds(): Array<BigInt> {
    return this.value1;
  }
}

export class LoanMachine__getLoanContractResultValue0Struct extends ethereum.Tuple {
  get walletAddress(): Address {
    return this[0].toAddress();
  }

  get requisitionId(): BigInt {
    return this[1].toBigInt();
  }

  get status(): i32 {
    return this[2].toI32();
  }

  get parcelsCount(): BigInt {
    return this[3].toBigInt();
  }

  get parcelsPending(): BigInt {
    return this[4].toBigInt();
  }

  get parcelsValues(): BigInt {
    return this[5].toBigInt();
  }

  get paymentDates(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get parcelsAmounts(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get creationTime(): BigInt {
    return this[8].toBigInt();
  }
}

export class LoanMachine__getNextPaymentAmountResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getPaymentAmount(): BigInt {
    return this.value0;
  }

  getCanPay(): boolean {
    return this.value1;
  }
}

export class LoanMachine__getRepaymentSummaryResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getTotalRemainingDebt(): BigInt {
    return this.value0;
  }

  getNextPaymentAmount(): BigInt {
    return this.value1;
  }

  getParcelsRemaining(): BigInt {
    return this.value2;
  }

  getTotalParcels(): BigInt {
    return this.value3;
  }

  getIsActive(): boolean {
    return this.value4;
  }
}

export class LoanMachine__getRequisitionInfoResultValue0Struct extends ethereum.Tuple {
  get requisitionId(): BigInt {
    return this[0].toBigInt();
  }

  get borrower(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get minimumCoverage(): BigInt {
    return this[3].toBigInt();
  }

  get currentCoverage(): BigInt {
    return this[4].toBigInt();
  }

  get status(): i32 {
    return this[5].toI32();
  }

  get creationTime(): BigInt {
    return this[6].toBigInt();
  }

  get coveringLenders(): Array<Address> {
    return this[7].toAddressArray();
  }

  get parcelsCount(): BigInt {
    return this[8].toBigInt();
  }
}

export class LoanMachine__loanContractsResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getWalletAddress(): Address {
    return this.value0;
  }

  getRequisitionId(): BigInt {
    return this.value1;
  }

  getStatus(): i32 {
    return this.value2;
  }

  getParcelsCount(): BigInt {
    return this.value3;
  }

  getParcelsPending(): BigInt {
    return this.value4;
  }

  getParcelsValues(): BigInt {
    return this.value5;
  }

  getCreationTime(): BigInt {
    return this.value6;
  }
}

export class LoanMachine extends ethereum.SmartContract {
  static bind(address: Address): LoanMachine {
    return new LoanMachine("LoanMachine", address);
  }

  borrowerRequisitions(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "borrowerRequisitions",
      "borrowerRequisitions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_borrowerRequisitions(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowerRequisitions",
      "borrowerRequisitions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canPayRequisition(requisitionId: BigInt, borrower: Address): boolean {
    let result = super.call(
      "canPayRequisition",
      "canPayRequisition(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requisitionId),
        ethereum.Value.fromAddress(borrower),
      ],
    );

    return result[0].toBoolean();
  }

  try_canPayRequisition(
    requisitionId: BigInt,
    borrower: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canPayRequisition",
      "canPayRequisition(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(requisitionId),
        ethereum.Value.fromAddress(borrower),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canUserBorrow(_user: Address, _amount: BigInt): boolean {
    let result = super.call(
      "canUserBorrow",
      "canUserBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_canUserBorrow(
    _user: Address,
    _amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canUserBorrow",
      "canUserBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createLoanRequisition(
    amount: BigInt,
    minimumCoverage: BigInt,
    durationDays: BigInt,
    parcelscount: BigInt,
    memberId: BigInt,
  ): BigInt {
    let result = super.call(
      "createLoanRequisition",
      "createLoanRequisition(uint256,uint32,uint256,uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minimumCoverage),
        ethereum.Value.fromUnsignedBigInt(durationDays),
        ethereum.Value.fromUnsignedBigInt(parcelscount),
        ethereum.Value.fromUnsignedBigInt(memberId),
      ],
    );

    return result[0].toBigInt();
  }

  try_createLoanRequisition(
    amount: BigInt,
    minimumCoverage: BigInt,
    durationDays: BigInt,
    parcelscount: BigInt,
    memberId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createLoanRequisition",
      "createLoanRequisition(uint256,uint32,uint256,uint32,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minimumCoverage),
        ethereum.Value.fromUnsignedBigInt(durationDays),
        ethereum.Value.fromUnsignedBigInt(parcelscount),
        ethereum.Value.fromUnsignedBigInt(memberId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getActiveLoans(borrower: Address): LoanMachine__getActiveLoansResult {
    let result = super.call(
      "getActiveLoans",
      "getActiveLoans(address):((address,uint256,uint8,uint32,uint32,uint256,uint256[],uint256[],uint256)[],uint256[])",
      [ethereum.Value.fromAddress(borrower)],
    );

    return new LoanMachine__getActiveLoansResult(
      result[0].toTupleArray<LoanMachine__getActiveLoansResultActiveLoansStruct>(),
      result[1].toBigIntArray(),
    );
  }

  try_getActiveLoans(
    borrower: Address,
  ): ethereum.CallResult<LoanMachine__getActiveLoansResult> {
    let result = super.tryCall(
      "getActiveLoans",
      "getActiveLoans(address):((address,uint256,uint8,uint32,uint32,uint256,uint256[],uint256[],uint256)[],uint256[])",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoanMachine__getActiveLoansResult(
        value[0].toTupleArray<LoanMachine__getActiveLoansResultActiveLoansStruct>(),
        value[1].toBigIntArray(),
      ),
    );
  }

  getAllowance(user: Address): BigInt {
    let result = super.call("getAllowance", "getAllowance(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBigInt();
  }

  try_getAllowance(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAllowance",
      "getAllowance(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableBalance(): BigInt {
    let result = super.call(
      "getAvailableBalance",
      "getAvailableBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getAvailableBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableBalance",
      "getAvailableBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableBorrowAmount(): BigInt {
    let result = super.call(
      "getAvailableBorrowAmount",
      "getAvailableBorrowAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getAvailableBorrowAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableBorrowAmount",
      "getAvailableBorrowAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowerDebtStatus(borrower: Address): i32 {
    let result = super.call(
      "getBorrowerDebtStatus",
      "getBorrowerDebtStatus(address):(uint8)",
      [ethereum.Value.fromAddress(borrower)],
    );

    return result[0].toI32();
  }

  try_getBorrowerDebtStatus(borrower: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getBorrowerDebtStatus",
      "getBorrowerDebtStatus(address):(uint8)",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getBorrowerRequisitions(borrower: Address): Array<BigInt> {
    let result = super.call(
      "getBorrowerRequisitions",
      "getBorrowerRequisitions(address):(uint256[])",
      [ethereum.Value.fromAddress(borrower)],
    );

    return result[0].toBigIntArray();
  }

  try_getBorrowerRequisitions(
    borrower: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBorrowerRequisitions",
      "getBorrowerRequisitions(address):(uint256[])",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBorrowersWithDebt(): Array<Address> {
    let result = super.call(
      "getBorrowersWithDebt",
      "getBorrowersWithDebt():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getBorrowersWithDebt(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBorrowersWithDebt",
      "getBorrowersWithDebt():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBorrowersWithoutDebt(): Array<Address> {
    let result = super.call(
      "getBorrowersWithoutDebt",
      "getBorrowersWithoutDebt():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getBorrowersWithoutDebt(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBorrowersWithoutDebt",
      "getBorrowersWithoutDebt():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getBorrowing(_user: Address): BigInt {
    let result = super.call("getBorrowing", "getBorrowing(address):(uint256)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBigInt();
  }

  try_getBorrowing(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowing",
      "getBorrowing(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCoveringLenders(requisitionId: BigInt): Array<Address> {
    let result = super.call(
      "getCoveringLenders",
      "getCoveringLenders(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );

    return result[0].toAddressArray();
  }

  try_getCoveringLenders(
    requisitionId: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCoveringLenders",
      "getCoveringLenders(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDonation(_user: Address): BigInt {
    let result = super.call("getDonation", "getDonation(address):(uint256)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBigInt();
  }

  try_getDonation(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDonation",
      "getDonation(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDonationsInCoverage(lender: Address): BigInt {
    let result = super.call(
      "getDonationsInCoverage",
      "getDonationsInCoverage(address):(uint256)",
      [ethereum.Value.fromAddress(lender)],
    );

    return result[0].toBigInt();
  }

  try_getDonationsInCoverage(lender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDonationsInCoverage",
      "getDonationsInCoverage(address):(uint256)",
      [ethereum.Value.fromAddress(lender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastBorrowTime(_user: Address): BigInt {
    let result = super.call(
      "getLastBorrowTime",
      "getLastBorrowTime(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try_getLastBorrowTime(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastBorrowTime",
      "getLastBorrowTime(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLenderCoverage(requisitionId: BigInt, lender: Address): BigInt {
    let result = super.call(
      "getLenderCoverage",
      "getLenderCoverage(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requisitionId),
        ethereum.Value.fromAddress(lender),
      ],
    );

    return result[0].toBigInt();
  }

  try_getLenderCoverage(
    requisitionId: BigInt,
    lender: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLenderCoverage",
      "getLenderCoverage(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requisitionId),
        ethereum.Value.fromAddress(lender),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLoanContract(
    requisitionId: BigInt,
  ): LoanMachine__getLoanContractResultValue0Struct {
    let result = super.call(
      "getLoanContract",
      "getLoanContract(uint256):((address,uint256,uint8,uint32,uint32,uint256,uint256[],uint256[],uint256))",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );

    return changetype<LoanMachine__getLoanContractResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getLoanContract(
    requisitionId: BigInt,
  ): ethereum.CallResult<LoanMachine__getLoanContractResultValue0Struct> {
    let result = super.tryCall(
      "getLoanContract",
      "getLoanContract(uint256):((address,uint256,uint8,uint32,uint32,uint256,uint256[],uint256[],uint256))",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LoanMachine__getLoanContractResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getMemberId(wallet: Address): BigInt {
    let result = super.call("getMemberId", "getMemberId(address):(uint32)", [
      ethereum.Value.fromAddress(wallet),
    ]);

    return result[0].toBigInt();
  }

  try_getMemberId(wallet: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMemberId", "getMemberId(address):(uint32)", [
      ethereum.Value.fromAddress(wallet),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextPaymentAmount(
    requisitionId: BigInt,
  ): LoanMachine__getNextPaymentAmountResult {
    let result = super.call(
      "getNextPaymentAmount",
      "getNextPaymentAmount(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );

    return new LoanMachine__getNextPaymentAmountResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
    );
  }

  try_getNextPaymentAmount(
    requisitionId: BigInt,
  ): ethereum.CallResult<LoanMachine__getNextPaymentAmountResult> {
    let result = super.tryCall(
      "getNextPaymentAmount",
      "getNextPaymentAmount(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoanMachine__getNextPaymentAmountResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
      ),
    );
  }

  getPaymentDates(requisitionId: BigInt): Array<BigInt> {
    let result = super.call(
      "getPaymentDates",
      "getPaymentDates(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );

    return result[0].toBigIntArray();
  }

  try_getPaymentDates(
    requisitionId: BigInt,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPaymentDates",
      "getPaymentDates(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRepaymentSummary(
    requisitionId: BigInt,
  ): LoanMachine__getRepaymentSummaryResult {
    let result = super.call(
      "getRepaymentSummary",
      "getRepaymentSummary(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );

    return new LoanMachine__getRepaymentSummaryResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
    );
  }

  try_getRepaymentSummary(
    requisitionId: BigInt,
  ): ethereum.CallResult<LoanMachine__getRepaymentSummaryResult> {
    let result = super.tryCall(
      "getRepaymentSummary",
      "getRepaymentSummary(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoanMachine__getRepaymentSummaryResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
      ),
    );
  }

  getReputation(memberId: BigInt): i32 {
    let result = super.call("getReputation", "getReputation(uint32):(int32)", [
      ethereum.Value.fromUnsignedBigInt(memberId),
    ]);

    return result[0].toI32();
  }

  try_getReputation(memberId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getReputation",
      "getReputation(uint32):(int32)",
      [ethereum.Value.fromUnsignedBigInt(memberId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getRequisitionInfo(
    requisitionId: BigInt,
  ): LoanMachine__getRequisitionInfoResultValue0Struct {
    let result = super.call(
      "getRequisitionInfo",
      "getRequisitionInfo(uint256):((uint256,address,uint256,uint32,uint32,uint8,uint256,address[],uint32))",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );

    return changetype<LoanMachine__getRequisitionInfoResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getRequisitionInfo(
    requisitionId: BigInt,
  ): ethereum.CallResult<LoanMachine__getRequisitionInfoResultValue0Struct> {
    let result = super.tryCall(
      "getRequisitionInfo",
      "getRequisitionInfo(uint256):((uint256,address,uint256,uint32,uint32,uint8,uint256,address[],uint32))",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LoanMachine__getRequisitionInfoResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getTotalBorrowed(): BigInt {
    let result = super.call(
      "getTotalBorrowed",
      "getTotalBorrowed():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalBorrowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBorrowed",
      "getTotalBorrowed():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDonations(): BigInt {
    let result = super.call(
      "getTotalDonations",
      "getTotalDonations():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalDonations(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDonations",
      "getTotalDonations():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUSDTBalance(): BigInt {
    let result = super.call("getUSDTBalance", "getUSDTBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getUSDTBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUSDTBalance",
      "getUSDTBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawableBalance(user: Address): BigInt {
    let result = super.call(
      "getWithdrawableBalance",
      "getWithdrawableBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_getWithdrawableBalance(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawableBalance",
      "getWithdrawableBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasActiveDebt(borrower: Address): boolean {
    let result = super.call("hasActiveDebt", "hasActiveDebt(address):(bool)", [
      ethereum.Value.fromAddress(borrower),
    ]);

    return result[0].toBoolean();
  }

  try_hasActiveDebt(borrower: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasActiveDebt",
      "hasActiveDebt(address):(bool)",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasOverdueDebt(borrower: Address): boolean {
    let result = super.call(
      "hasOverdueDebt",
      "hasOverdueDebt(address):(bool)",
      [ethereum.Value.fromAddress(borrower)],
    );

    return result[0].toBoolean();
  }

  try_hasOverdueDebt(borrower: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasOverdueDebt",
      "hasOverdueDebt(address):(bool)",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWalletVinculated(wallet: Address): boolean {
    let result = super.call(
      "isWalletVinculated",
      "isWalletVinculated(address):(bool)",
      [ethereum.Value.fromAddress(wallet)],
    );

    return result[0].toBoolean();
  }

  try_isWalletVinculated(wallet: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWalletVinculated",
      "isWalletVinculated(address):(bool)",
      [ethereum.Value.fromAddress(wallet)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loanContracts(param0: BigInt): LoanMachine__loanContractsResult {
    let result = super.call(
      "loanContracts",
      "loanContracts(uint256):(address,uint256,uint8,uint32,uint32,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new LoanMachine__loanContractsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
    );
  }

  try_loanContracts(
    param0: BigInt,
  ): ethereum.CallResult<LoanMachine__loanContractsResult> {
    let result = super.tryCall(
      "loanContracts",
      "loanContracts(uint256):(address,uint256,uint8,uint32,uint32,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoanMachine__loanContractsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
      ),
    );
  }

  nextMonthlyUpdate(): BigInt {
    let result = super.call(
      "nextMonthlyUpdate",
      "nextMonthlyUpdate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_nextMonthlyUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextMonthlyUpdate",
      "nextMonthlyUpdate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reputationSystem(): Address {
    let result = super.call(
      "reputationSystem",
      "reputationSystem():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_reputationSystem(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reputationSystem",
      "reputationSystem():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requisitionCounter(): BigInt {
    let result = super.call(
      "requisitionCounter",
      "requisitionCounter():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_requisitionCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requisitionCounter",
      "requisitionCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shouldTriggerUpdate(): boolean {
    let result = super.call(
      "shouldTriggerUpdate",
      "shouldTriggerUpdate():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_shouldTriggerUpdate(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shouldTriggerUpdate",
      "shouldTriggerUpdate():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  usdtToken(): Address {
    let result = super.call("usdtToken", "usdtToken():(address)", []);

    return result[0].toAddress();
  }

  try_usdtToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdtToken", "usdtToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _usdtToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _reputationSystem(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BatchUpdateDebtStatusCall extends ethereum.Call {
  get inputs(): BatchUpdateDebtStatusCall__Inputs {
    return new BatchUpdateDebtStatusCall__Inputs(this);
  }

  get outputs(): BatchUpdateDebtStatusCall__Outputs {
    return new BatchUpdateDebtStatusCall__Outputs(this);
  }
}

export class BatchUpdateDebtStatusCall__Inputs {
  _call: BatchUpdateDebtStatusCall;

  constructor(call: BatchUpdateDebtStatusCall) {
    this._call = call;
  }

  get borrowers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class BatchUpdateDebtStatusCall__Outputs {
  _call: BatchUpdateDebtStatusCall;

  constructor(call: BatchUpdateDebtStatusCall) {
    this._call = call;
  }
}

export class CoverLoanCall extends ethereum.Call {
  get inputs(): CoverLoanCall__Inputs {
    return new CoverLoanCall__Inputs(this);
  }

  get outputs(): CoverLoanCall__Outputs {
    return new CoverLoanCall__Outputs(this);
  }
}

export class CoverLoanCall__Inputs {
  _call: CoverLoanCall;

  constructor(call: CoverLoanCall) {
    this._call = call;
  }

  get requisitionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get coveragePercentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get memberId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CoverLoanCall__Outputs {
  _call: CoverLoanCall;

  constructor(call: CoverLoanCall) {
    this._call = call;
  }
}

export class CreateLoanRequisitionCall extends ethereum.Call {
  get inputs(): CreateLoanRequisitionCall__Inputs {
    return new CreateLoanRequisitionCall__Inputs(this);
  }

  get outputs(): CreateLoanRequisitionCall__Outputs {
    return new CreateLoanRequisitionCall__Outputs(this);
  }
}

export class CreateLoanRequisitionCall__Inputs {
  _call: CreateLoanRequisitionCall;

  constructor(call: CreateLoanRequisitionCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minimumCoverage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get durationDays(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get parcelscount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get memberId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateLoanRequisitionCall__Outputs {
  _call: CreateLoanRequisitionCall;

  constructor(call: CreateLoanRequisitionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this);
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this);
  }
}

export class DonateCall__Inputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get memberId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DonateCall__Outputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get requisitionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get memberId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class TriggerMonthlyUpdateCall extends ethereum.Call {
  get inputs(): TriggerMonthlyUpdateCall__Inputs {
    return new TriggerMonthlyUpdateCall__Inputs(this);
  }

  get outputs(): TriggerMonthlyUpdateCall__Outputs {
    return new TriggerMonthlyUpdateCall__Outputs(this);
  }
}

export class TriggerMonthlyUpdateCall__Inputs {
  _call: TriggerMonthlyUpdateCall;

  constructor(call: TriggerMonthlyUpdateCall) {
    this._call = call;
  }
}

export class TriggerMonthlyUpdateCall__Outputs {
  _call: TriggerMonthlyUpdateCall;

  constructor(call: TriggerMonthlyUpdateCall) {
    this._call = call;
  }
}

export class UpdateBorrowerDebtStatusCall extends ethereum.Call {
  get inputs(): UpdateBorrowerDebtStatusCall__Inputs {
    return new UpdateBorrowerDebtStatusCall__Inputs(this);
  }

  get outputs(): UpdateBorrowerDebtStatusCall__Outputs {
    return new UpdateBorrowerDebtStatusCall__Outputs(this);
  }
}

export class UpdateBorrowerDebtStatusCall__Inputs {
  _call: UpdateBorrowerDebtStatusCall;

  constructor(call: UpdateBorrowerDebtStatusCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateBorrowerDebtStatusCall__Outputs {
  _call: UpdateBorrowerDebtStatusCall;

  constructor(call: UpdateBorrowerDebtStatusCall) {
    this._call = call;
  }
}

export class VinculationMemberToWalletCall extends ethereum.Call {
  get inputs(): VinculationMemberToWalletCall__Inputs {
    return new VinculationMemberToWalletCall__Inputs(this);
  }

  get outputs(): VinculationMemberToWalletCall__Outputs {
    return new VinculationMemberToWalletCall__Outputs(this);
  }
}

export class VinculationMemberToWalletCall__Inputs {
  _call: VinculationMemberToWalletCall;

  constructor(call: VinculationMemberToWalletCall) {
    this._call = call;
  }

  get memberId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get wallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class VinculationMemberToWalletCall__Outputs {
  _call: VinculationMemberToWalletCall;

  constructor(call: VinculationMemberToWalletCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get memberId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
