// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AvailableBalanceUpdated extends ethereum.Event {
  get params(): AvailableBalanceUpdated__Params {
    return new AvailableBalanceUpdated__Params(this);
  }
}

export class AvailableBalanceUpdated__Params {
  _event: AvailableBalanceUpdated;

  constructor(event: AvailableBalanceUpdated) {
    this._event = event;
  }

  get total(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BorrowLimitReached extends ethereum.Event {
  get params(): BorrowLimitReached__Params {
    return new BorrowLimitReached__Params(this);
  }
}

export class BorrowLimitReached__Params {
  _event: BorrowLimitReached;

  constructor(event: BorrowLimitReached) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Borrowed extends ethereum.Event {
  get params(): Borrowed__Params {
    return new Borrowed__Params(this);
  }
}

export class Borrowed__Params {
  _event: Borrowed;

  constructor(event: Borrowed) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalBorrowing(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Donated extends ethereum.Event {
  get params(): Donated__Params {
    return new Donated__Params(this);
  }
}

export class Donated__Params {
  _event: Donated;

  constructor(event: Donated) {
    this._event = event;
  }

  get donor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalDonation(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanContractGenerated extends ethereum.Event {
  get params(): LoanContractGenerated__Params {
    return new LoanContractGenerated__Params(this);
  }
}

export class LoanContractGenerated__Params {
  _event: LoanContractGenerated;

  constructor(event: LoanContractGenerated) {
    this._event = event;
  }

  get walletAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get requisitionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get parcelsPending(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LoanCovered extends ethereum.Event {
  get params(): LoanCovered__Params {
    return new LoanCovered__Params(this);
  }
}

export class LoanCovered__Params {
  _event: LoanCovered;

  constructor(event: LoanCovered) {
    this._event = event;
  }

  get requisitionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get coverageAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanFunded extends ethereum.Event {
  get params(): LoanFunded__Params {
    return new LoanFunded__Params(this);
  }
}

export class LoanFunded__Params {
  _event: LoanFunded;

  constructor(event: LoanFunded) {
    this._event = event;
  }

  get requisitionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LoanRequisitionCreated extends ethereum.Event {
  get params(): LoanRequisitionCreated__Params {
    return new LoanRequisitionCreated__Params(this);
  }
}

export class LoanRequisitionCreated__Params {
  _event: LoanRequisitionCreated;

  constructor(event: LoanRequisitionCreated) {
    this._event = event;
  }

  get requisitionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get parcelsCount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewBorrower extends ethereum.Event {
  get params(): NewBorrower__Params {
    return new NewBorrower__Params(this);
  }
}

export class NewBorrower__Params {
  _event: NewBorrower;

  constructor(event: NewBorrower) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewDonor extends ethereum.Event {
  get params(): NewDonor__Params {
    return new NewDonor__Params(this);
  }
}

export class NewDonor__Params {
  _event: NewDonor;

  constructor(event: NewDonor) {
    this._event = event;
  }

  get donor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Repaid extends ethereum.Event {
  get params(): Repaid__Params {
    return new Repaid__Params(this);
  }
}

export class Repaid__Params {
  _event: Repaid;

  constructor(event: Repaid) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get remainingDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TotalBorrowedUpdated extends ethereum.Event {
  get params(): TotalBorrowedUpdated__Params {
    return new TotalBorrowedUpdated__Params(this);
  }
}

export class TotalBorrowedUpdated__Params {
  _event: TotalBorrowedUpdated;

  constructor(event: TotalBorrowedUpdated) {
    this._event = event;
  }

  get total(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TotalDonationsUpdated extends ethereum.Event {
  get params(): TotalDonationsUpdated__Params {
    return new TotalDonationsUpdated__Params(this);
  }
}

export class TotalDonationsUpdated__Params {
  _event: TotalDonationsUpdated;

  constructor(event: TotalDonationsUpdated) {
    this._event = event;
  }

  get total(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LoanMachine__getLoanContractResultValue0Struct extends ethereum.Tuple {
  get walletAddress(): Address {
    return this[0].toAddress();
  }

  get requisitionId(): BigInt {
    return this[1].toBigInt();
  }

  get status(): i32 {
    return this[2].toI32();
  }

  get parcelsPending(): BigInt {
    return this[3].toBigInt();
  }
}

export class LoanMachine__getRequisitionInfoResultValue0Struct extends ethereum.Tuple {
  get requisitionId(): BigInt {
    return this[0].toBigInt();
  }

  get borrower(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get minimumCoverage(): BigInt {
    return this[3].toBigInt();
  }

  get currentCoverage(): BigInt {
    return this[4].toBigInt();
  }

  get status(): i32 {
    return this[5].toI32();
  }

  get durationDays(): BigInt {
    return this[6].toBigInt();
  }

  get creationTime(): BigInt {
    return this[7].toBigInt();
  }

  get coveringLenders(): Array<Address> {
    return this[8].toAddressArray();
  }

  get parcelsCount(): BigInt {
    return this[9].toBigInt();
  }
}

export class LoanMachine__loanContractsResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getWalletAddress(): Address {
    return this.value0;
  }

  getRequisitionId(): BigInt {
    return this.value1;
  }

  getStatus(): i32 {
    return this.value2;
  }

  getParcelsPending(): BigInt {
    return this.value3;
  }
}

export class LoanMachine extends ethereum.SmartContract {
  static bind(address: Address): LoanMachine {
    return new LoanMachine("LoanMachine", address);
  }

  borrowerRequisitions(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "borrowerRequisitions",
      "borrowerRequisitions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_borrowerRequisitions(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowerRequisitions",
      "borrowerRequisitions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canUserBorrow(_user: Address, _amount: BigInt): boolean {
    let result = super.call(
      "canUserBorrow",
      "canUserBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_canUserBorrow(
    _user: Address,
    _amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canUserBorrow",
      "canUserBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createLoanRequisition(
    _amount: BigInt,
    _minimumCoverage: BigInt,
    _durationDays: BigInt,
    parcelscount: BigInt,
  ): BigInt {
    let result = super.call(
      "createLoanRequisition",
      "createLoanRequisition(uint256,uint32,uint256,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minimumCoverage),
        ethereum.Value.fromUnsignedBigInt(_durationDays),
        ethereum.Value.fromUnsignedBigInt(parcelscount),
      ],
    );

    return result[0].toBigInt();
  }

  try_createLoanRequisition(
    _amount: BigInt,
    _minimumCoverage: BigInt,
    _durationDays: BigInt,
    parcelscount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createLoanRequisition",
      "createLoanRequisition(uint256,uint32,uint256,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minimumCoverage),
        ethereum.Value.fromUnsignedBigInt(_durationDays),
        ethereum.Value.fromUnsignedBigInt(parcelscount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableBalance(): BigInt {
    let result = super.call(
      "getAvailableBalance",
      "getAvailableBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getAvailableBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableBalance",
      "getAvailableBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableBorrowAmount(): BigInt {
    let result = super.call(
      "getAvailableBorrowAmount",
      "getAvailableBorrowAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getAvailableBorrowAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableBorrowAmount",
      "getAvailableBorrowAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowerRequisitions(borrower: Address): Array<BigInt> {
    let result = super.call(
      "getBorrowerRequisitions",
      "getBorrowerRequisitions(address):(uint256[])",
      [ethereum.Value.fromAddress(borrower)],
    );

    return result[0].toBigIntArray();
  }

  try_getBorrowerRequisitions(
    borrower: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBorrowerRequisitions",
      "getBorrowerRequisitions(address):(uint256[])",
      [ethereum.Value.fromAddress(borrower)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBorrowing(_user: Address): BigInt {
    let result = super.call("getBorrowing", "getBorrowing(address):(uint256)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBigInt();
  }

  try_getBorrowing(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowing",
      "getBorrowing(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCoveringLenders(requisitionId: BigInt): Array<Address> {
    let result = super.call(
      "getCoveringLenders",
      "getCoveringLenders(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );

    return result[0].toAddressArray();
  }

  try_getCoveringLenders(
    requisitionId: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCoveringLenders",
      "getCoveringLenders(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDonation(_user: Address): BigInt {
    let result = super.call("getDonation", "getDonation(address):(uint256)", [
      ethereum.Value.fromAddress(_user),
    ]);

    return result[0].toBigInt();
  }

  try_getDonation(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDonation",
      "getDonation(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastBorrowTime(_user: Address): BigInt {
    let result = super.call(
      "getLastBorrowTime",
      "getLastBorrowTime(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try_getLastBorrowTime(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastBorrowTime",
      "getLastBorrowTime(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLenderCoverage(requisitionId: BigInt, lender: Address): BigInt {
    let result = super.call(
      "getLenderCoverage",
      "getLenderCoverage(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requisitionId),
        ethereum.Value.fromAddress(lender),
      ],
    );

    return result[0].toBigInt();
  }

  try_getLenderCoverage(
    requisitionId: BigInt,
    lender: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLenderCoverage",
      "getLenderCoverage(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(requisitionId),
        ethereum.Value.fromAddress(lender),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLoanContract(
    requisitionId: BigInt,
  ): LoanMachine__getLoanContractResultValue0Struct {
    let result = super.call(
      "getLoanContract",
      "getLoanContract(uint256):((address,uint256,uint8,uint32))",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );

    return changetype<LoanMachine__getLoanContractResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getLoanContract(
    requisitionId: BigInt,
  ): ethereum.CallResult<LoanMachine__getLoanContractResultValue0Struct> {
    let result = super.tryCall(
      "getLoanContract",
      "getLoanContract(uint256):((address,uint256,uint8,uint32))",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LoanMachine__getLoanContractResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getRequisitionInfo(
    requisitionId: BigInt,
  ): LoanMachine__getRequisitionInfoResultValue0Struct {
    let result = super.call(
      "getRequisitionInfo",
      "getRequisitionInfo(uint256):((uint256,address,uint256,uint32,uint32,uint8,uint256,uint256,address[],uint32))",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );

    return changetype<LoanMachine__getRequisitionInfoResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getRequisitionInfo(
    requisitionId: BigInt,
  ): ethereum.CallResult<LoanMachine__getRequisitionInfoResultValue0Struct> {
    let result = super.tryCall(
      "getRequisitionInfo",
      "getRequisitionInfo(uint256):((uint256,address,uint256,uint32,uint32,uint8,uint256,uint256,address[],uint32))",
      [ethereum.Value.fromUnsignedBigInt(requisitionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LoanMachine__getRequisitionInfoResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getTotalBorrowed(): BigInt {
    let result = super.call(
      "getTotalBorrowed",
      "getTotalBorrowed():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalBorrowed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBorrowed",
      "getTotalBorrowed():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDonations(): BigInt {
    let result = super.call(
      "getTotalDonations",
      "getTotalDonations():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalDonations(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDonations",
      "getTotalDonations():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanContracts(param0: BigInt): LoanMachine__loanContractsResult {
    let result = super.call(
      "loanContracts",
      "loanContracts(uint256):(address,uint256,uint8,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new LoanMachine__loanContractsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBigInt(),
    );
  }

  try_loanContracts(
    param0: BigInt,
  ): ethereum.CallResult<LoanMachine__loanContractsResult> {
    let result = super.tryCall(
      "loanContracts",
      "loanContracts(uint256):(address,uint256,uint8,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoanMachine__loanContractsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBigInt(),
      ),
    );
  }

  requisitionCounter(): BigInt {
    let result = super.call(
      "requisitionCounter",
      "requisitionCounter():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_requisitionCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requisitionCounter",
      "requisitionCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class CoverLoanCall extends ethereum.Call {
  get inputs(): CoverLoanCall__Inputs {
    return new CoverLoanCall__Inputs(this);
  }

  get outputs(): CoverLoanCall__Outputs {
    return new CoverLoanCall__Outputs(this);
  }
}

export class CoverLoanCall__Inputs {
  _call: CoverLoanCall;

  constructor(call: CoverLoanCall) {
    this._call = call;
  }

  get requisitionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get coveragePercentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CoverLoanCall__Outputs {
  _call: CoverLoanCall;

  constructor(call: CoverLoanCall) {
    this._call = call;
  }
}

export class CreateLoanRequisitionCall extends ethereum.Call {
  get inputs(): CreateLoanRequisitionCall__Inputs {
    return new CreateLoanRequisitionCall__Inputs(this);
  }

  get outputs(): CreateLoanRequisitionCall__Outputs {
    return new CreateLoanRequisitionCall__Outputs(this);
  }
}

export class CreateLoanRequisitionCall__Inputs {
  _call: CreateLoanRequisitionCall;

  constructor(call: CreateLoanRequisitionCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minimumCoverage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _durationDays(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get parcelscount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateLoanRequisitionCall__Outputs {
  _call: CreateLoanRequisitionCall;

  constructor(call: CreateLoanRequisitionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this);
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this);
  }
}

export class DonateCall__Inputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class DonateCall__Outputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}
