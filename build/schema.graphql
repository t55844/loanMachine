type Donation @entity(immutable: false) {
  id: ID!
  donor: User! 
  amount: BigInt!
  timestamp: BigInt!
  totalDonation: BigInt!
}

type Borrow @entity(immutable: false) {
  id: ID!
  borrower: User! 
  amount: BigInt!
  timestamp: BigInt!
  totalBorrowing: BigInt!
}

type Repayment @entity(immutable: false) {
  id: ID!
  borrower: User! 
  amount: BigInt!
  timestamp: BigInt!
  remainingDebt: BigInt!
}

type User @entity(immutable: false) {
  id: ID!  # Wallet address
  totalDonated: BigInt!
  totalBorrowed: BigInt!
  currentDebt: BigInt!
  lastActivity: BigInt!
  donations: [Donation!]! @derivedFrom(field: "donor")
  borrows: [Borrow!]! @derivedFrom(field: "borrower")
  repayments: [Repayment!]! @derivedFrom(field: "borrower")
  # New debt tracking fields
  currentDebtStatus: DebtStatusEnum!
  debtStatusHistory: [DebtStatus!]! @derivedFrom(field: "borrower")
  hasOpenDebt: Boolean!
  isInDebtorList: Boolean!
  isAuthorizedCaller: Boolean!
  lastStatusUpdate: BigInt!
}

type Stats @entity(immutable: false) {
  id: ID!
  totalDonations: BigInt!
  totalBorrowed: BigInt!
  availableBalance: BigInt!
}

type LoanRequest @entity(immutable: false) {
  id: ID!
  requisitionId: BigInt!
  borrower: User!
  amount: BigInt!
  timestamp: BigInt!
  currentCoverageAmount: BigInt!
  coveringLendersCount: Int!
  funded: Boolean!
  fundedAt: BigInt
  coverages: [LoanCoverage!]! @derivedFrom(field: "loanRequest")
  parcelsCount: Int          
  coveringLenders: [User!] 
}

type LoanCoverage @entity(immutable: false) {
  id: ID!
  loanRequest: LoanRequest!
  lender: User!
  amount: BigInt!
  timestamp: BigInt!
}

type LoanContract @entity(immutable: false) {
  id: ID!
  walletAddress: User!
  requisitionId: BigInt!
  status: Int!
  parcelsPending: Int!
  parcelsValues: BigInt
  createdAt: BigInt!
  completedAt: BigInt
}

type ParcelPayment @entity(immutable: false) {
  id: ID!
  requisitionId: BigInt!
  borrower: User!
  amount: BigInt!
  timestamp: BigInt!
  parcelsRemaining: Int!
}

type LenderRepayment @entity(immutable: false) {
  id: ID!
  requisitionId: BigInt!
  lender: User!
  amount: BigInt!
  timestamp: BigInt!
}

type Member @entity(immutable: false) {
  id: ID!
  memberId: BigInt!
  wallets: [String!]!  # Array of wallet addresses as strings
  linkedAt: BigInt!
  currentReputation: Int
  # Election participation
  votesCast: [Vote!]! @derivedFrom(field: "voter")
}

type ReputationChange @entity(immutable: false) {
  id: ID!
  memberId: BigInt!
  member: Member
  points: Int!
  increase: Boolean!
  newReputation: Int!
  timestamp: BigInt!
}

# Debt Status Tracking Entities
type DebtStatus @entity(immutable: false) {
  id: ID!
  borrower: User!
  status: DebtStatusEnum!
  timestamp: BigInt!
}

type DebtorList @entity(immutable: false) {
  id: ID!
  borrowersWithOpenDebt: [User!]!
  borrowersWithoutOpenDebt: [User!]!
  lastMonthlyUpdate: BigInt!
  nextMonthlyUpdate: BigInt!
  shouldTriggerUpdate: Boolean!
}

# Election System Entities
type Election @entity(immutable: false) {
  id: ID!
  electionId: BigInt!
  candidateId: BigInt!
  startTime: BigInt!
  endTime: BigInt!
  isOpen: Boolean!
  winnerId: BigInt
  winningVotes: Int
  candidates: [Candidate!]! @derivedFrom(field: "election")
  votes: [Vote!]! @derivedFrom(field: "election")
  createdAt: BigInt!
}

type Candidate @entity(immutable: false) {
  id: ID!
  election: Election!
  candidateId: BigInt!
  member: Member
  totalVotes: Int!
  addedAt: BigInt!
}

type Vote @entity(immutable: false) {
  id: ID!
  election: Election!
  candidate: Candidate!
  voter: Member!
  voteWeight: Int!
  timestamp: BigInt!
}

type AuthorizedCaller @entity(immutable: false) {
  id: ID!
  caller: User!
  authorized: Boolean!
  lastUpdated: BigInt!
}

# Enum for debt status (matches Solidity enum)
enum DebtStatusEnum {
  NoDebt
  HasActiveDebt
  HasOverdueDebt
}