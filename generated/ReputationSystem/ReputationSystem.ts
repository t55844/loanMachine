// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AuthorizedCallerUpdated extends ethereum.Event {
  get params(): AuthorizedCallerUpdated__Params {
    return new AuthorizedCallerUpdated__Params(this);
  }
}

export class AuthorizedCallerUpdated__Params {
  _event: AuthorizedCallerUpdated;

  constructor(event: AuthorizedCallerUpdated) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get authorized(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class CandidateAdded extends ethereum.Event {
  get params(): CandidateAdded__Params {
    return new CandidateAdded__Params(this);
  }
}

export class CandidateAdded__Params {
  _event: CandidateAdded;

  constructor(event: CandidateAdded) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get candidateId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ElectionClosed extends ethereum.Event {
  get params(): ElectionClosed__Params {
    return new ElectionClosed__Params(this);
  }
}

export class ElectionClosed__Params {
  _event: ElectionClosed;

  constructor(event: ElectionClosed) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winnerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get winningVotes(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class ElectionOpened extends ethereum.Event {
  get params(): ElectionOpened__Params {
    return new ElectionOpened__Params(this);
  }
}

export class ElectionOpened__Params {
  _event: ElectionOpened;

  constructor(event: ElectionOpened) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get candidateId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MemberToWalletVinculation extends ethereum.Event {
  get params(): MemberToWalletVinculation__Params {
    return new MemberToWalletVinculation__Params(this);
  }
}

export class MemberToWalletVinculation__Params {
  _event: MemberToWalletVinculation;

  constructor(event: MemberToWalletVinculation) {
    this._event = event;
  }

  get memberId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get wallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get walletVinculated(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewModerator extends ethereum.Event {
  get params(): NewModerator__Params {
    return new NewModerator__Params(this);
  }
}

export class NewModerator__Params {
  _event: NewModerator;

  constructor(event: NewModerator) {
    this._event = event;
  }

  get memberId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get electionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReputationChanged extends ethereum.Event {
  get params(): ReputationChanged__Params {
    return new ReputationChanged__Params(this);
  }
}

export class ReputationChanged__Params {
  _event: ReputationChanged;

  constructor(event: ReputationChanged) {
    this._event = event;
  }

  get memberId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get points(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get increase(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get newReputation(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UnbeatableMajorityReached extends ethereum.Event {
  get params(): UnbeatableMajorityReached__Params {
    return new UnbeatableMajorityReached__Params(this);
  }
}

export class UnbeatableMajorityReached__Params {
  _event: UnbeatableMajorityReached;

  constructor(event: UnbeatableMajorityReached) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winnerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get winningVotes(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class VoteCast extends ethereum.Event {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get candidateId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get memberId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get voteWeight(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class ReputationSystem__checkUnbeatableMajorityResult {
  value0: boolean;
  value1: BigInt;
  value2: i32;
  value3: BigInt;
  value4: i32;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: i32,
    value3: BigInt,
    value4: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromI32(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromI32(this.value4));
    return map;
  }

  getIsUnbeatable(): boolean {
    return this.value0;
  }

  getLeadingCandidate(): BigInt {
    return this.value1;
  }

  getLeadingVotes(): i32 {
    return this.value2;
  }

  getSecondCandidate(): BigInt {
    return this.value3;
  }

  getSecondVotes(): i32 {
    return this.value4;
  }
}

export class ReputationSystem__electionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: BigInt;
  value5: i32;
  value6: i32;
  value7: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: BigInt,
    value5: i32,
    value6: i32,
    value7: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromI32(this.value5));
    map.set("value6", ethereum.Value.fromI32(this.value6));
    map.set("value7", ethereum.Value.fromI32(this.value7));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getStartTime(): BigInt {
    return this.value1;
  }

  getEndTime(): BigInt {
    return this.value2;
  }

  getActive(): boolean {
    return this.value3;
  }

  getWinnerId(): BigInt {
    return this.value4;
  }

  getWinningVotes(): i32 {
    return this.value5;
  }

  getTotalVotesCast(): i32 {
    return this.value6;
  }

  getPotentialRemainingVotes(): i32 {
    return this.value7;
  }
}

export class ReputationSystem__getElectionInfoResult {
  value0: BigInt;
  value1: Array<BigInt>;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;
  value6: i32;
  value7: i32;

  constructor(
    value0: BigInt,
    value1: Array<BigInt>,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: BigInt,
    value6: i32,
    value7: i32,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromI32(this.value6));
    map.set("value7", ethereum.Value.fromI32(this.value7));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getCandidates(): Array<BigInt> {
    return this.value1;
  }

  getStartTime(): BigInt {
    return this.value2;
  }

  getEndTime(): BigInt {
    return this.value3;
  }

  getActive(): boolean {
    return this.value4;
  }

  getWinnerId(): BigInt {
    return this.value5;
  }

  getWinningVotes(): i32 {
    return this.value6;
  }

  getTotalVotesCast(): i32 {
    return this.value7;
  }
}

export class ReputationSystem extends ethereum.SmartContract {
  static bind(address: Address): ReputationSystem {
    return new ReputationSystem("ReputationSystem", address);
  }

  REPUTATION_GAIN_BY_COVERING_LOAN(): i32 {
    let result = super.call(
      "REPUTATION_GAIN_BY_COVERING_LOAN",
      "REPUTATION_GAIN_BY_COVERING_LOAN():(int32)",
      [],
    );

    return result[0].toI32();
  }

  try_REPUTATION_GAIN_BY_COVERING_LOAN(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "REPUTATION_GAIN_BY_COVERING_LOAN",
      "REPUTATION_GAIN_BY_COVERING_LOAN():(int32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  REPUTATION_GAIN_BY_REPAYNG_DEBT(): i32 {
    let result = super.call(
      "REPUTATION_GAIN_BY_REPAYNG_DEBT",
      "REPUTATION_GAIN_BY_REPAYNG_DEBT():(int32)",
      [],
    );

    return result[0].toI32();
  }

  try_REPUTATION_GAIN_BY_REPAYNG_DEBT(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "REPUTATION_GAIN_BY_REPAYNG_DEBT",
      "REPUTATION_GAIN_BY_REPAYNG_DEBT():(int32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  REPUTATION_LOSS_BY_DEBT_NOT_PAYD(): i32 {
    let result = super.call(
      "REPUTATION_LOSS_BY_DEBT_NOT_PAYD",
      "REPUTATION_LOSS_BY_DEBT_NOT_PAYD():(int32)",
      [],
    );

    return result[0].toI32();
  }

  try_REPUTATION_LOSS_BY_DEBT_NOT_PAYD(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "REPUTATION_LOSS_BY_DEBT_NOT_PAYD",
      "REPUTATION_LOSS_BY_DEBT_NOT_PAYD():(int32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  authorizedCallers(param0: Address): boolean {
    let result = super.call(
      "authorizedCallers",
      "authorizedCallers(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_authorizedCallers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorizedCallers",
      "authorizedCallers(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkUnbeatableMajority(
    electionId: BigInt,
  ): ReputationSystem__checkUnbeatableMajorityResult {
    let result = super.call(
      "checkUnbeatableMajority",
      "checkUnbeatableMajority(uint32):(bool,uint32,int32,uint32,int32)",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );

    return new ReputationSystem__checkUnbeatableMajorityResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toI32(),
    );
  }

  try_checkUnbeatableMajority(
    electionId: BigInt,
  ): ethereum.CallResult<ReputationSystem__checkUnbeatableMajorityResult> {
    let result = super.tryCall(
      "checkUnbeatableMajority",
      "checkUnbeatableMajority(uint32):(bool,uint32,int32,uint32,int32)",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ReputationSystem__checkUnbeatableMajorityResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toI32(),
      ),
    );
  }

  elections(param0: BigInt): ReputationSystem__electionsResult {
    let result = super.call(
      "elections",
      "elections(uint256):(uint32,uint256,uint256,bool,uint32,int32,int32,int32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new ReputationSystem__electionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32(),
    );
  }

  try_elections(
    param0: BigInt,
  ): ethereum.CallResult<ReputationSystem__electionsResult> {
    let result = super.tryCall(
      "elections",
      "elections(uint256):(uint32,uint256,uint256,bool,uint32,int32,int32,int32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ReputationSystem__electionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32(),
      ),
    );
  }

  getActiveMemberCount(): BigInt {
    let result = super.call(
      "getActiveMemberCount",
      "getActiveMemberCount():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getActiveMemberCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getActiveMemberCount",
      "getActiveMemberCount():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAverageReputation(): i32 {
    let result = super.call(
      "getAverageReputation",
      "getAverageReputation():(int32)",
      [],
    );

    return result[0].toI32();
  }

  try_getAverageReputation(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getAverageReputation",
      "getAverageReputation():(int32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getCandidateVotes(candidateId: BigInt): i32 {
    let result = super.call(
      "getCandidateVotes",
      "getCandidateVotes(uint32):(int32)",
      [ethereum.Value.fromUnsignedBigInt(candidateId)],
    );

    return result[0].toI32();
  }

  try_getCandidateVotes(candidateId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCandidateVotes",
      "getCandidateVotes(uint32):(int32)",
      [ethereum.Value.fromUnsignedBigInt(candidateId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getCurrentElectionId(): i32 {
    let result = super.call(
      "getCurrentElectionId",
      "getCurrentElectionId():(int32)",
      [],
    );

    return result[0].toI32();
  }

  try_getCurrentElectionId(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCurrentElectionId",
      "getCurrentElectionId():(int32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getElectionInfo(electionId: BigInt): ReputationSystem__getElectionInfoResult {
    let result = super.call(
      "getElectionInfo",
      "getElectionInfo(uint32):(uint32,uint32[],uint256,uint256,bool,uint32,int32,int32)",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );

    return new ReputationSystem__getElectionInfoResult(
      result[0].toBigInt(),
      result[1].toBigIntArray(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toI32(),
      result[7].toI32(),
    );
  }

  try_getElectionInfo(
    electionId: BigInt,
  ): ethereum.CallResult<ReputationSystem__getElectionInfoResult> {
    let result = super.tryCall(
      "getElectionInfo",
      "getElectionInfo(uint32):(uint32,uint32[],uint256,uint256,bool,uint32,int32,int32)",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ReputationSystem__getElectionInfoResult(
        value[0].toBigInt(),
        value[1].toBigIntArray(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toI32(),
        value[7].toI32(),
      ),
    );
  }

  getMemberId(wallet: Address): BigInt {
    let result = super.call("getMemberId", "getMemberId(address):(uint32)", [
      ethereum.Value.fromAddress(wallet),
    ]);

    return result[0].toBigInt();
  }

  try_getMemberId(wallet: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMemberId", "getMemberId(address):(uint32)", [
      ethereum.Value.fromAddress(wallet),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReputation(memberId: BigInt): i32 {
    let result = super.call("getReputation", "getReputation(uint32):(int32)", [
      ethereum.Value.fromUnsignedBigInt(memberId),
    ]);

    return result[0].toI32();
  }

  try_getReputation(memberId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getReputation",
      "getReputation(uint32):(int32)",
      [ethereum.Value.fromUnsignedBigInt(memberId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  hasMemberVoted(electionId: BigInt, memberId: BigInt): boolean {
    let result = super.call(
      "hasMemberVoted",
      "hasMemberVoted(uint32,uint32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(electionId),
        ethereum.Value.fromUnsignedBigInt(memberId),
      ],
    );

    return result[0].toBoolean();
  }

  try_hasMemberVoted(
    electionId: BigInt,
    memberId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasMemberVoted",
      "hasMemberVoted(uint32,uint32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(electionId),
        ethereum.Value.fromUnsignedBigInt(memberId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasVotedInElection(param0: BigInt, param1: BigInt): boolean {
    let result = super.call(
      "hasVotedInElection",
      "hasVotedInElection(uint32,uint32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBoolean();
  }

  try_hasVotedInElection(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasVotedInElection",
      "hasVotedInElection(uint32,uint32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMemberActive(memberId: BigInt): boolean {
    let result = super.call("isMemberActive", "isMemberActive(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(memberId),
    ]);

    return result[0].toBoolean();
  }

  try_isMemberActive(memberId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMemberActive",
      "isMemberActive(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(memberId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isModerator(param0: BigInt): boolean {
    let result = super.call("isModerator", "isModerator(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isModerator(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isModerator", "isModerator(uint32):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWalletVinculated(wallet: Address): boolean {
    let result = super.call(
      "isWalletVinculated",
      "isWalletVinculated(address):(bool)",
      [ethereum.Value.fromAddress(wallet)],
    );

    return result[0].toBoolean();
  }

  try_isWalletVinculated(wallet: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWalletVinculated",
      "isWalletVinculated(address):(bool)",
      [ethereum.Value.fromAddress(wallet)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  memberReputation(param0: BigInt): i32 {
    let result = super.call(
      "memberReputation",
      "memberReputation(uint32):(int32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toI32();
  }

  try_memberReputation(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "memberReputation",
      "memberReputation(uint32):(int32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  moderatorVotesReceived(param0: BigInt): i32 {
    let result = super.call(
      "moderatorVotesReceived",
      "moderatorVotesReceived(uint32):(int32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toI32();
  }

  try_moderatorVotesReceived(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "moderatorVotesReceived",
      "moderatorVotesReceived(uint32):(int32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalPotentialVotes(): i32 {
    let result = super.call(
      "totalPotentialVotes",
      "totalPotentialVotes():(int32)",
      [],
    );

    return result[0].toI32();
  }

  try_totalPotentialVotes(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "totalPotentialVotes",
      "totalPotentialVotes():(int32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  walletToMemberId(param0: Address): BigInt {
    let result = super.call(
      "walletToMemberId",
      "walletToMemberId(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_walletToMemberId(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "walletToMemberId",
      "walletToMemberId(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  walletsOfMember(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "walletsOfMember",
      "walletsOfMember(uint32,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_walletsOfMember(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "walletsOfMember",
      "walletsOfMember(uint32,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCandidateCall extends ethereum.Call {
  get inputs(): AddCandidateCall__Inputs {
    return new AddCandidateCall__Inputs(this);
  }

  get outputs(): AddCandidateCall__Outputs {
    return new AddCandidateCall__Outputs(this);
  }
}

export class AddCandidateCall__Inputs {
  _call: AddCandidateCall;

  constructor(call: AddCandidateCall) {
    this._call = call;
  }

  get electionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get candidateId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCandidateCall__Outputs {
  _call: AddCandidateCall;

  constructor(call: AddCandidateCall) {
    this._call = call;
  }
}

export class CloseElectionCall extends ethereum.Call {
  get inputs(): CloseElectionCall__Inputs {
    return new CloseElectionCall__Inputs(this);
  }

  get outputs(): CloseElectionCall__Outputs {
    return new CloseElectionCall__Outputs(this);
  }
}

export class CloseElectionCall__Inputs {
  _call: CloseElectionCall;

  constructor(call: CloseElectionCall) {
    this._call = call;
  }

  get electionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseElectionCall__Outputs {
  _call: CloseElectionCall;

  constructor(call: CloseElectionCall) {
    this._call = call;
  }
}

export class OpenElectionCall extends ethereum.Call {
  get inputs(): OpenElectionCall__Inputs {
    return new OpenElectionCall__Inputs(this);
  }

  get outputs(): OpenElectionCall__Outputs {
    return new OpenElectionCall__Outputs(this);
  }
}

export class OpenElectionCall__Inputs {
  _call: OpenElectionCall;

  constructor(call: OpenElectionCall) {
    this._call = call;
  }

  get candidateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get oponent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OpenElectionCall__Outputs {
  _call: OpenElectionCall;

  constructor(call: OpenElectionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReputationChangeCall extends ethereum.Call {
  get inputs(): ReputationChangeCall__Inputs {
    return new ReputationChangeCall__Inputs(this);
  }

  get outputs(): ReputationChangeCall__Outputs {
    return new ReputationChangeCall__Outputs(this);
  }
}

export class ReputationChangeCall__Inputs {
  _call: ReputationChangeCall;

  constructor(call: ReputationChangeCall) {
    this._call = call;
  }

  get memberId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get points(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get increase(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ReputationChangeCall__Outputs {
  _call: ReputationChangeCall;

  constructor(call: ReputationChangeCall) {
    this._call = call;
  }
}

export class SetAuthorizedCallerCall extends ethereum.Call {
  get inputs(): SetAuthorizedCallerCall__Inputs {
    return new SetAuthorizedCallerCall__Inputs(this);
  }

  get outputs(): SetAuthorizedCallerCall__Outputs {
    return new SetAuthorizedCallerCall__Outputs(this);
  }
}

export class SetAuthorizedCallerCall__Inputs {
  _call: SetAuthorizedCallerCall;

  constructor(call: SetAuthorizedCallerCall) {
    this._call = call;
  }

  get caller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get authorized(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAuthorizedCallerCall__Outputs {
  _call: SetAuthorizedCallerCall;

  constructor(call: SetAuthorizedCallerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VinculationMemberToWalletCall extends ethereum.Call {
  get inputs(): VinculationMemberToWalletCall__Inputs {
    return new VinculationMemberToWalletCall__Inputs(this);
  }

  get outputs(): VinculationMemberToWalletCall__Outputs {
    return new VinculationMemberToWalletCall__Outputs(this);
  }
}

export class VinculationMemberToWalletCall__Inputs {
  _call: VinculationMemberToWalletCall;

  constructor(call: VinculationMemberToWalletCall) {
    this._call = call;
  }

  get memberId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get wallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class VinculationMemberToWalletCall__Outputs {
  _call: VinculationMemberToWalletCall;

  constructor(call: VinculationMemberToWalletCall) {
    this._call = call;
  }
}

export class VoteForModeratorCall extends ethereum.Call {
  get inputs(): VoteForModeratorCall__Inputs {
    return new VoteForModeratorCall__Inputs(this);
  }

  get outputs(): VoteForModeratorCall__Outputs {
    return new VoteForModeratorCall__Outputs(this);
  }
}

export class VoteForModeratorCall__Inputs {
  _call: VoteForModeratorCall;

  constructor(call: VoteForModeratorCall) {
    this._call = call;
  }

  get electionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get candidateId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get memberId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class VoteForModeratorCall__Outputs {
  _call: VoteForModeratorCall;

  constructor(call: VoteForModeratorCall) {
    this._call = call;
  }
}
